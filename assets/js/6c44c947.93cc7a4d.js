"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[39204],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>g});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),m=p(n),g=i,h=m["".concat(s,".").concat(g)]||m[g]||u[g]||r;return n?a.createElement(h,o(o({ref:t},l),{},{components:n})):a.createElement(h,o({ref:t},l))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:i,o[1]=c;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},32664:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>c,toc:()=>p});var a=n(87462),i=(n(67294),n(3905));const r={title:"HMAC Signing Example in Java",slug:"/r/c_hmac_signing_example"},o=void 0,c={unversionedId:"guides/apis/apis_hmac_auth/configure_java_hmac/hmac_signing_example_java",id:"guides/apis/apis_hmac_auth/configure_java_hmac/hmac_signing_example_java",title:"HMAC Signing Example in Java",description:"This is a Java example of how to enable HMAC signing within your application. The example implementation of the HMAC signing algorithm allows you to authenticate with the Veracode APIs.",source:"@site/docs/guides/15_apis/03_apis_hmac_auth/01_configure_java_hmac/01_hmac_signing_example_java.md",sourceDirName:"guides/15_apis/03_apis_hmac_auth/01_configure_java_hmac",slug:"/r/c_hmac_signing_example",permalink:"/km-docusaurus-test/r/c_hmac_signing_example",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"HMAC Signing Example in Java",slug:"/r/c_hmac_signing_example"},sidebar:"tutorialSidebar",previous:{title:"Install the Java Authentication Library",permalink:"/km-docusaurus-test/r/t_configure_java_library"},next:{title:"Install the Python Authentication Library",permalink:"/km-docusaurus-test/r/t_install_api_authen"}},s={},p=[{value:"<code>HmacRequestSigner.java</code>",id:"hmacrequestsignerjava",level:2},{value:"<code>Main.java</code>",id:"mainjava",level:2}],l={toc:p};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This is a Java example of how to enable HMAC signing within your application. The example implementation of the HMAC signing algorithm allows you to authenticate with the Veracode APIs."),(0,i.kt)("h2",{id:"hmacrequestsignerjava"},(0,i.kt)("inlineCode",{parentName:"h2"},"HmacRequestSigner.java")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'package com.veracode.hmac_request_signing;\n\nimport java.io.UnsupportedEncodingException;\nimport java.net.URL;\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.SecureRandom;\nimport java.util.Locale;\n\nimport javax.crypto.Mac;\nimport javax.crypto.spec.SecretKeySpec;\nimport javax.xml.bind.DatatypeConverter;\n\npublic final class HmacRequestSigner {\n\n    // Included in the signature to inform Veracode of the signature version.\n    private static final String VERACODE_REQUEST_VERSION_STRING = "vcode_request_version_1";\n\n    // Expected format for the unencrypted data string.\n    private static final String DATA_FORMAT = "id=%s&host=%s&url=%s&method=%s";\n\n    // Expected format for the Authorization header.\n    private static final String HEADER_FORMAT = "%s id=%s,ts=%s,nonce=%s,sig=%s";\n\n    // Expect prefix to the Authorization header.\n    private static final String VERACODE_HMAC_SHA_256 = "VERACODE-HMAC-SHA-256";\n\n    // HMAC encryption algorithm.\n    private static final String HMAC_SHA_256 = "HmacSHA256";\n\n    // Charset to use when encrypting a string.\n    private static final String UTF_8 = "UTF-8";\n\n    // A cryptographically secure random number generator.\n    private static final SecureRandom secureRandom = new SecureRandom();\n\n    // Private constructor.\n    private HmacRequestSigner() {\n        /*\n         * This is a utility class that should only be accessed through its\n         * static methods.\n         */\n    }\n\n    /**\n     * Entry point for HmacRequestSigner. Returns the value for the\n     * Authorization header for use with Veracode APIs when provided an API ID,\n     * secret key, and target URL.\n     *\n     * @param id\n     *            An API id for authentication\n     * @param key\n     *            The secret key corresponding to the API ID\n     * @param url\n     *            The URL of the called API, including query parameters\n     *\n     * @return The value to be put in the Authorization header\n     *\n     * @throws UnsupportedEncodingException\n     * @throws IllegalStateException\n     * @throws NoSuchAlgorithmException\n     * @throws InvalidKeyException\n     */\n    public static String getVeracodeAuthorizationHeader(final String id, final String key, final URL url, final String httpMethod)\n            throws InvalidKeyException, NoSuchAlgorithmException, IllegalStateException, UnsupportedEncodingException {\n        final String urlPath = (url.getQuery() == null) ? url.getPath() : url.getPath().concat("?").concat(url.getQuery());\n        final String data = String.format(DATA_FORMAT, id, url.getHost(), urlPath, httpMethod);\n        final String timestamp = String.valueOf(System.currentTimeMillis());\n        final String nonce = DatatypeConverter.printHexBinary(generateRandomBytes(16)).toLowerCase(Locale.US);\n        final String signature = getSignature(key, data, timestamp, nonce);\n        return String.format(HEADER_FORMAT, VERACODE_HMAC_SHA_256, id, timestamp, nonce, signature);\n    }\n\n    /*\n     * Generate the signature expected by the Veracode platform by chaining\n     * encryption routines in the correct order.\n     */\n    private static String getSignature(final String key, final String data, final String timestamp, final String nonce)\n            throws InvalidKeyException, NoSuchAlgorithmException, IllegalStateException, UnsupportedEncodingException {\n        final byte[] keyBytes = DatatypeConverter.parseHexBinary(key);\n        final byte[] nonceBytes = DatatypeConverter.parseHexBinary(nonce);\n        final byte[] encryptedNonce = hmacSha256(nonceBytes, keyBytes);\n        final byte[] encryptedTimestamp = hmacSha256(timestamp, encryptedNonce);\n        final byte[] signingKey = hmacSha256(VERACODE_REQUEST_VERSION_STRING, encryptedTimestamp);\n        final byte[] signature = hmacSha256(data, signingKey);\n        return DatatypeConverter.printHexBinary(signature).toLowerCase(Locale.US);\n    }\n\n    // Encrypt a string using the provided key.\n    private static byte[] hmacSha256(final String data, final byte[] key)\n            throws NoSuchAlgorithmException, InvalidKeyException, IllegalStateException, UnsupportedEncodingException {\n        final Mac mac = Mac.getInstance(HMAC_SHA_256);\n        mac.init(new SecretKeySpec(key, HMAC_SHA_256));\n        return mac.doFinal(data.getBytes(UTF_8));\n    }\n\n    // Encrypt a byte array using the provided key.\n    private static byte[] hmacSha256(final byte[] data, final byte[] key)\n            throws NoSuchAlgorithmException, InvalidKeyException {\n        final Mac mac = Mac.getInstance(HMAC_SHA_256);\n        mac.init(new SecretKeySpec(key, HMAC_SHA_256));\n        return mac.doFinal(data);\n    }\n\n    // Generate a random byte array for cryptographic use.\n    private static byte[] generateRandomBytes(final int size) {\n        final byte[] key = new byte[size];\n        secureRandom.nextBytes(key);\n        return key;\n    }\n\n}\n')),(0,i.kt)("h2",{id:"mainjava"},(0,i.kt)("inlineCode",{parentName:"h2"},"Main.java")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'package com.veracode.hmac_request_signing;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URL;\nimport java.security.InvalidKeyException;\nimport java.security.KeyManagementException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.cert.X509Certificate;\n\nimport javax.net.ssl.HostnameVerifier;\nimport javax.net.ssl.HttpsURLConnection;\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.SSLSession;\nimport javax.net.ssl.TrustManager;\nimport javax.net.ssl.X509TrustManager;\n\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\npublic class Main {\n\n    private static final String URL_BASE = "api.veracode.com";\n    private static final String URL_PATH = "/appsec/v1/applications/";\n    private static final String GET = "GET";\n    private static final String APP_GUID = "8b86411e-65f9-4224-948a-64559c777d10";\n    private static final String ACCESS_KEY_ID = "dbb6f2a2ed0b6890bbd32e949f72c8c8";\n    private static final String SECRET_ACCESS_KEY = "530da152f87e5530c82f786907fbc74b09a6894785a78bab3891632ba69325400a40713bdc11d2a6d2d1c3969431281c0a73f455a53c0ed5ea0756e9c54f366c";\n\n    /**\n     * The main method for our demo.  This makes a simple API call using our example HMAC signing class\n     * and writes the response to the output stream.\n     *\n     * @param args command line arguments - ignored\n     */\n    public static void main(final String[] args) {\n        try {\n            /*\n             * Combine the URL base with the specific URL endpoint we wish to access.\n             * This is REST, so the GUID we are accessing is in the URL.\n             */\n            final URL applicationsApiUrl = new URL("https://" + URL_BASE + URL_PATH + APP_GUID);\n\n            /*\n             * Now we use the url above and our example HMAC signer class to generate a Veracode HMAC header for later use.\n             */\n            final String authorizationHeader = HmacRequestSigner.getVeracodeAuthorizationHeader(ACCESS_KEY_ID, SECRET_ACCESS_KEY, applicationsApiUrl, GET);\n\n            /*\n             * Here we are using Java built in HTTPS protocols to handle making a call to the API\'s URL.\n             * We also set the request method to GET.\n             */\n            final HttpsURLConnection connection = (HttpsURLConnection) applicationsApiUrl.openConnection();\n            connection.setRequestMethod(GET);\n\n            /*\n             * This is where we add the Authorization header with the value returned by our example HMAC signer class.\n             */\n            connection.setRequestProperty("Authorization", authorizationHeader);\n\n            /*\n             * Now we just need to make the actual call by opening up the response stream and read from it.\n             */\n            try (InputStream responseInputStream = connection.getInputStream()) {\n                readResponse(responseInputStream);\n            }\n        } catch (InvalidKeyException | NoSuchAlgorithmException | IllegalStateException | IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    /*\n     * A simple method to read an input stream (containing JSON) to System.out.\n     */\n    private static void readResponse(InputStream responseInputStream) throws IOException, JSONException {\n        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n        byte[] responseBytes = new byte[16384];\n        int x = 0;\n        while ((x = responseInputStream.read(responseBytes, 0, responseBytes.length)) != -1) {\n            outputStream.write(responseBytes, 0, x);\n        }\n        outputStream.flush();\n        System.out.println((new JSONObject(outputStream.toString())).toString(4));\n    }\n\n}\n')))}u.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[44050],{3905:(e,n,i)=>{i.d(n,{Zo:()=>c,kt:()=>m});var t=i(67294);function a(e,n,i){return n in e?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i,e}function r(e,n){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),i.push.apply(i,t)}return i}function l(e){for(var n=1;n<arguments.length;n++){var i=null!=arguments[n]?arguments[n]:{};n%2?r(Object(i),!0).forEach((function(n){a(e,n,i[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(i,n))}))}return e}function p(e,n){if(null==e)return{};var i,t,a=function(e,n){if(null==e)return{};var i,t,a={},r=Object.keys(e);for(t=0;t<r.length;t++)i=r[t],n.indexOf(i)>=0||(a[i]=e[i]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)i=r[t],n.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}var s=t.createContext({}),o=function(e){var n=t.useContext(s),i=n;return e&&(i="function"==typeof e?e(n):l(l({},n),e)),i},c=function(e){var n=o(e.components);return t.createElement(s.Provider,{value:n},e.children)},_={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var i=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=o(i),m=a,b=u["".concat(s,".").concat(m)]||u[m]||_[m]||r;return i?t.createElement(b,l(l({ref:n},c),{},{components:i})):t.createElement(b,l({ref:n},c))}));function m(e,n){var i=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=i.length,l=new Array(r);l[0]=u;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p.mdxType="string"==typeof e?e:a,l[1]=p;for(var o=2;o<r;o++)l[o]=i[o];return t.createElement.apply(null,l)}return t.createElement.apply(null,i)}u.displayName="MDXCreateElement"},1480:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>_,frontMatter:()=>r,metadata:()=>p,toc:()=>o});var t=i(87462),a=(i(67294),i(3905));const r={title:"Pipeline Scan Example for Using Maven with GitLab",slug:"/r/Pipeline_Scan_Example_for_Using_Maven_with_GitLab"},l=void 0,p={unversionedId:"guides/pipeline_scan/pipeline_scan_gitlab_examples/r_gitlab_maven",id:"guides/pipeline_scan/pipeline_scan_gitlab_examples/r_gitlab_maven",title:"Pipeline Scan Example for Using Maven with GitLab",description:"This example YAML code shows how to add a Pipeline Scan as a build stage in a GitLab Actions build pipeline using Maven.",source:"@site/docs/guides/08_pipeline_scan/08_pipeline_scan_gitlab_examples/09_r_gitlab_maven.md",sourceDirName:"guides/08_pipeline_scan/08_pipeline_scan_gitlab_examples",slug:"/r/Pipeline_Scan_Example_for_Using_Maven_with_GitLab",permalink:"/km-docusaurus-test/r/Pipeline_Scan_Example_for_Using_Maven_with_GitLab",draft:!1,tags:[],version:"current",sidebarPosition:9,frontMatter:{title:"Pipeline Scan Example for Using Maven with GitLab",slug:"/r/Pipeline_Scan_Example_for_Using_Maven_with_GitLab"},sidebar:"tutorialSidebar",previous:{title:"Pipeline Scan Example for Using a Baseline File with GitLab",permalink:"/km-docusaurus-test/r/Pipeline_Scan_Example_for_Using_a_Baseline_File_with_GitLab"},next:{title:"Jenkins Pipeline Scan Examples",permalink:"/km-docusaurus-test/r/Jenkins_Pipeline_Scan_Examples"}},s={},o=[],c={toc:o};function _(e){let{components:n,...i}=e;return(0,a.kt)("wrapper",(0,t.Z)({},c,i,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This example YAML code shows how to add a Pipeline Scan as a build stage in a GitLab Actions build pipeline using Maven."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'\n# image must have JDK8+, gradle, curl, unzip\nimage: <image-with-above-requirements>\n\nstages:\n  - build\n  - scan\n\nbuild_job:\n  stage: build\n  script:\n    - mvn clean verify\n  artifacts:\n    name: ${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHA}_build\n    paths:\n      - build/\n    expire_in: 1 week\n\npipeline scan:\n  stage: scan\n  dependencies:\n    - build_job\n  artifacts:\n    name: ${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHA}_pipeline-results\n    paths:\n      - results.json\n    expire_in: 1 week\n    when: always\n  script:\n    - curl -O https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip\n    - unzip pipeline-scan-LATEST.zip pipeline-scan.jar\n    - java -jar pipeline-scan.jar\n      --veracode_api_id "${VERACODE_API_ID}"\n      --veracode_api_key "${VERACODE_API_SECRET}"\n      --file "build/libs/sample.jar"\n      --gitlab_api_token "${PRIVATE_TOKEN}"\n      --fail_on_severity="Very High, High"\n      --fail_on_cwe="80"\n      --baseline_file "${CI_BASELINE_PATH}"\n      --timeout "${CI_TIMEOUT}"\n      --project_name "${CI_PROJECT_PATH}"\n      --project_url "${CI_REPOSITORY_URL}"\n      --project_ref "${CI_COMMIT_REF_NAME}"\n\n')))}_.isMDXComponent=!0}}]);
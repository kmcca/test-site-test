"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[92606],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>c});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),p=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=p(e.components);return a.createElement(d.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,d=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(n),c=r,k=u["".concat(d,".").concat(c)]||u[c]||m[c]||i;return n?a.createElement(k,o(o({ref:t},s),{},{components:n})):a.createElement(k,o({ref:t},s))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},53917:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const i={title:"Azure DevOps YAML Properties for Flaw Importer",slug:"/r/Azure_DevOps_YAML_Properties_for_Flaw_Importer"},o=void 0,l={unversionedId:"guides/integrations/ticketing/azure_devops_extension/azure_flaw_import_yaml_props",id:"guides/integrations/ticketing/azure_devops_extension/azure_flaw_import_yaml_props",title:"Azure DevOps YAML Properties for Flaw Importer",description:"This table describes the YAML properties and their values for adding the Veracode Flaw Importer task to an Azure DevOps or Team Foundation Server \\(TFS\\) build pipeline.",source:"@site/docs/guides/04_integrations/07_ticketing/02_azure_devops_extension/04_azure_flaw_import_yaml_props.md",sourceDirName:"guides/04_integrations/07_ticketing/02_azure_devops_extension",slug:"/r/Azure_DevOps_YAML_Properties_for_Flaw_Importer",permalink:"/km-docusaurus-test/r/Azure_DevOps_YAML_Properties_for_Flaw_Importer",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Azure DevOps YAML Properties for Flaw Importer",slug:"/r/Azure_DevOps_YAML_Properties_for_Flaw_Importer"},sidebar:"tutorialSidebar",previous:{title:"Use YAML to Configure Azure DevOps Pipelines for Importing Flaws and Vulnerabilities",permalink:"/km-docusaurus-test/r/Use_YAML_to_Configure_Azure_DevOps_Pipelines_for_Importing_Flaws"},next:{title:"Veracode for Bugzilla",permalink:"/km-docusaurus-test/r/c_integration_bugzilla"}},d={},p=[],s={toc:p};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This table describes the YAML properties and their values for ",(0,r.kt)("a",{parentName:"p",href:"https://docs.veracode.com/r/Use_YAML_to_Configure_Azure_DevOps_Pipelines_for_Importing_Flaws"},"adding the Veracode Flaw Importer task")," to an Azure DevOps or Team Foundation Server ","(","TFS",")"," build pipeline."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ConnectionDetailsSelection"),(0,r.kt)("br",null),(0,r.kt)("strong",{parentName:"td"},"Required")),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"One of these methods for connecting to Veracode:",(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("inlineCode",{parentName:"td"},"Endpoint")," to use an existing service connection that includes your ",(0,r.kt)("a",{parentName:"td",href:"https://docs.veracode.com/r/c_api_credentials3"},"Veracode API credentials"),". Include ",(0,r.kt)("inlineCode",{parentName:"td"},"AnalysisService")," to specify a service connection name."),(0,r.kt)("li",null,(0,r.kt)("inlineCode",{parentName:"td"},"Credentials")," to enter your Veracode API credentials. Include ",(0,r.kt)("inlineCode",{parentName:"td"},"apiId")," to enter your API ID and ",(0,r.kt)("inlineCode",{parentName:"td"},"apiKey")," to enter your API key.")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ConnectionDetailsSelection"),(0,r.kt)("br",null),(0,r.kt)("strong",{parentName:"td"},"Required")),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"One of these methods for connecting to Veracode:",(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("inlineCode",{parentName:"td"},"Endpoint")," to use an existing service connection that includes your ",(0,r.kt)("a",{parentName:"td",href:"https://docs.veracode.com/r/c_api_credentials3"},"Veracode API credentials"),". Include ",(0,r.kt)("inlineCode",{parentName:"td"},"AnalysisService")," to specify a service connection name."),(0,r.kt)("li",null,(0,r.kt)("inlineCode",{parentName:"td"},"Credentials")," to enter your Veracode API credentials. Include ",(0,r.kt)("inlineCode",{parentName:"td"},"apiId")," to enter your API ID and ",(0,r.kt)("inlineCode",{parentName:"td"},"apiKey")," to enter your API key.")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"veracodeAppProfile"),(0,r.kt)("br",null),(0,r.kt)("strong",{parentName:"td"},"Required")),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"Name of the ",(0,r.kt)("a",{parentName:"td",href:"https://docs.veracode.com/r/request_profile"},"Veracode application profile"),". The name is case-sensitive.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AnalysisService")),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"If you set ",(0,r.kt)("inlineCode",{parentName:"td"},"ConnectionDetailsSelection")," to ",(0,r.kt)("inlineCode",{parentName:"td"},"Endpoint"),", the name of the service connection for accessing Veracode.",(0,r.kt)("br",null),(0,r.kt)("br",null),"If a service connection does not exist, you can ",(0,r.kt)("a",{parentName:"td",href:"https://docs.veracode.com/r/Create_a_Service_Connection_in_Azure_DevOps"},"create a new service connection"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"apiId")),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"If you set ",(0,r.kt)("inlineCode",{parentName:"td"},"ConnectionDetailsSelection")," to ",(0,r.kt)("inlineCode",{parentName:"td"},"Credentials"),", your Veracode API ID.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"apiKey")),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"If you set ",(0,r.kt)("inlineCode",{parentName:"td"},"ConnectionDetailsSelection")," to ",(0,r.kt)("inlineCode",{parentName:"td"},"Credentials"),", your Veracode API key.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"proxySettings")),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"If using a proxy to access Veracode, your proxy settings. For example: ",(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"td"},"-phost abc.com -pport 5252 -puser proxyuser -ppassword proxypassword")," ",(0,r.kt)("br",null),(0,r.kt)("strong",{parentName:"td"},"NOTE:")," ",(0,r.kt)("br",null),"Do not enclose any of the values in single or double quotations.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"tfspassword")),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"If using TFS 2015 Update 2, your TFS password. If not using TFS, do not set this property.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"sandboxName")),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"For development sandbox scans, the name of the sandbox in which to run the scan. If the sandbox does not exist, include ",(0,r.kt)("inlineCode",{parentName:"td"},"createSandBox")," to create it with the specified name.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"scanType")),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"Scan type(s) from which to import flaws or vulnerabilities. One of these values: ",(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"td"},"Dynamic and Static Analysis"),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"td"},"Software Composition Analysis"),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"td"},"Dynamic, Static, and Software Composition Analysis"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"importType")),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"One of these flaw types to import:",(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("inlineCode",{parentName:"td"},"All Flaws"),": includes mitigated and remediated flaws and vulnerabilities from all scans. During the import process, the extension changes the state of the work items for all mitigated and remediated flaws to resolved or closed. After you fix or remediate the flaw, during the next scan, its status changes to fixed or mitigated in the Detailed Report. During the next import, the related work items change to closed. This option imports all flaws without any restrictions."),(0,r.kt)("li",null,(0,r.kt)("inlineCode",{parentName:"td"},"All Unmitigated Flaws"),": includes flaws and vulnerabilities from all scans."),(0,r.kt)("li",null,(0,r.kt)("inlineCode",{parentName:"td"},"All Flaws Violating Policy"),": includes all open flaws and vulnerabilities from all scans that affect policy."),(0,r.kt)("li",null,(0,r.kt)("inlineCode",{parentName:"td"},"All Unmitigated Flaws Violating Policy"),": includes open flaws and vulnerabilities from all scans that affect policy. The default.",(0,r.kt)("br",null),"When generating new work items for imported flaws, the extension also imports ",(0,r.kt)("a",{parentName:"td",href:"https://docs.veracode.com/r/improve_mitigation"},"mitigation and annotation comments"),". If you add comments to a previously imported flaws with work items, the extension does not import the new comments to work items during subsequent imports.")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"workItemType")),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"One of these work item types to apply to all imported flaws:",(0,r.kt)("inlineCode",{parentName:"td"},"Bug"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"Issue"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"Task"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"Epic"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"Feature"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"Test Case")," ",(0,r.kt)("br",null),(0,r.kt)("strong",{parentName:"td"},"NOTE:")," ",(0,r.kt)("br",null),"The Scrum process template does not support the Issue work item type. Also, the Veracode Flaw Importer task can only import flaws to customized work item types that do not contain required fields. If your customized work item types contain required fields, you must select different work item types that do not contain required fields, or the flaws fail to import.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"area")),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"Path to the area where you want to group the work items. You can enter up to five levels in the path. To enter the area paths, use the format ",(0,r.kt)("inlineCode",{parentName:"td"},"<project_name>\\<area_1>\\<area_2>"),". For ",(0,r.kt)("inlineCode",{parentName:"td"},"<project_name>"),", enter the name of the project in the Build Pipeline or Release Pipeline task for which you want to import flaws.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"overwriteAreaPathInWorkItemsOnImport")),(0,r.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"Set to ",(0,r.kt)("inlineCode",{parentName:"td"},"true")," to replace the area path in new and existing work items with the value specified for ",(0,r.kt)("inlineCode",{parentName:"td"},"area"),". If set to ",(0,r.kt)("inlineCode",{parentName:"td"},"false")," existing work items retain their current area path.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"addCustomTag")),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"Add a tag with a custom string to all work items for all imported flaws.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"addCweAsATag")),(0,r.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"Add a tag with the CWE ID for the discovered flaw to the corresponding work item. Set to ",(0,r.kt)("inlineCode",{parentName:"td"},"true")," to add the tag. Set to ",(0,r.kt)("inlineCode",{parentName:"td"},"false")," to not add the tag. Defaults to ",(0,r.kt)("inlineCode",{parentName:"td"},"true")," and you only see this property in the YAML file if the value is ",(0,r.kt)("inlineCode",{parentName:"td"},"false"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"foundInBuild")),(0,r.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"Add a tag with the build number of the build in which Veracode discovered the flaw to the corresponding work item. Set to ",(0,r.kt)("inlineCode",{parentName:"td"},"true")," to add the tag. Set to ",(0,r.kt)("inlineCode",{parentName:"td"},"false")," to not add the tag. Defaults to ",(0,r.kt)("inlineCode",{parentName:"td"},"true")," and you only see this property in the YAML file if the value is ",(0,r.kt)("inlineCode",{parentName:"td"},"false"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"addScanNameAsATag")),(0,r.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"Add a tag to each work item showing the name of the Veracode scan that found the imported flaw. Set to ",(0,r.kt)("inlineCode",{parentName:"td"},"true")," to add the tag. Set to ",(0,r.kt)("inlineCode",{parentName:"td"},"false")," to not add the tag. Defaults to ",(0,r.kt)("inlineCode",{parentName:"td"},"true")," and you only see this property in the YAML file if the value is ",(0,r.kt)("inlineCode",{parentName:"td"},"false"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"flawImportLimit")),(0,r.kt)("td",{parentName:"tr",align:null},"Integer"),(0,r.kt)("td",{parentName:"tr",align:null},"Maximum number of flaws to import at the same time. Default is ",(0,r.kt)("inlineCode",{parentName:"td"},"1000"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"customFields")),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"Add custom fields from process templates to generated work items of imported flaws. Enter key-value pairs to specify each field name and value. Add each key-value pair, separated with a colon, on a new line. For example: ",(0,r.kt)("inlineCode",{parentName:"td"},"field.name:value")," ",(0,r.kt)("br",null),(0,r.kt)("strong",{parentName:"td"},"NOTE:")," ",(0,r.kt)("br",null),"Ensure these field names match the field names you define in Azure and that all values are valid for a given field type. If there are any mismatch or validation errors, you can only see these errors in the console after importing flaws.")))))}m.isMDXComponent=!0}}]);
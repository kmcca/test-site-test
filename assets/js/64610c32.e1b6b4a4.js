"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[99343],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var i=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=i.createContext({}),s=function(e){var n=i.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=s(e.components);return i.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(t),m=r,_=d["".concat(c,".").concat(m)]||d[m]||u[m]||o;return t?i.createElement(_,a(a({ref:n},p),{},{components:t})):i.createElement(_,a({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,a=new Array(o);a[0]=d;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var s=2;s<o;s++)a[s]=t[s];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},75233:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var i=t(87462),r=(t(67294),t(3905));const o={title:"Replacing a Library Using Conditional Compilation Blocks",slug:"/r/Replacing_a_Library_Using_Conditional_Compilation_Blocks"},a=void 0,l={unversionedId:"guides/packaging/ios_tvos/resolve_missing_bitcode_ios/c_replace_library_conditionals",id:"guides/packaging/ios_tvos/resolve_missing_bitcode_ios/c_replace_library_conditionals",title:"Replacing a Library Using Conditional Compilation Blocks",description:"This product is deprecated. Veracode will delete this topic on February 1, 2023.",source:"@site/docs/guides/03_packaging/14_ios_tvos/04_resolve_missing_bitcode_ios/01_c_replace_library_conditionals.md",sourceDirName:"guides/03_packaging/14_ios_tvos/04_resolve_missing_bitcode_ios",slug:"/r/Replacing_a_Library_Using_Conditional_Compilation_Blocks",permalink:"/km-docusaurus-test/r/Replacing_a_Library_Using_Conditional_Compilation_Blocks",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Replacing a Library Using Conditional Compilation Blocks",slug:"/r/Replacing_a_Library_Using_Conditional_Compilation_Blocks"},sidebar:"tutorialSidebar",previous:{title:"Resolving Missing Bitcode in iOS Applications",permalink:"/km-docusaurus-test/r/Resolving_Missing_Bitcode_in_iOS_Applications"},next:{title:"Configure Xcode to Replace Third-Party Libraries",permalink:"/km-docusaurus-test/r/Configure_Xcode_to_Replace_Third_Party_Libraries"}},c={},s=[],p={toc:s};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,i.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"}," This product is deprecated. Veracode will delete this topic on February 1, 2023.")),(0,r.kt)("p",null,"You can use a Veracode workaround to replace a library so that an application can generate bitcode."),(0,r.kt)("p",null,"In some cases, you can remove the library from the bitcode variant and replace it with simple stubbed-out calls in the same source code. You can then generate the bitcode."),(0,r.kt)("p",null,"In this example, the code refers to a third-party library ",(0,r.kt)("inlineCode",{parentName:"p"},"InclusionLib"),". This code includes a call to a function called ",(0,r.kt)("inlineCode",{parentName:"p"},"RNG"),". Conditional compilation blocks control whether to include the stub or the ",(0,r.kt)("inlineCode",{parentName:"p"},"InclusionLib")," library."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'\nimport SwiftUI\n// IF/ELSE to include the mock library under certain conditions.\n#if _MISSING_BITCODE\nimport Foundation\n#else\nimport InclusionLib\n#endif\n\n#if _MISSING_BITCODE\nfunc RNG(with x:UInt32) ->UInt32 {\n      print("Running dummy rng")\n      return 1\n}\n#endif\n\n//Contents view for a specific example\nstruct ExampleView View {\n      let example: AccessibilityExample\n      let rng:UInt32\n\n      init(_ example: AccessibilityExample) {\n      self.example = example\n      self.rng = RNG(with: 3)\n      }\n\n      var body: some View {\n            VStack {\n                  example.view\n                        .padding(.horizontal)\n\n                  Spacer()\n            }\n      }\n}   \n\n')))}u.isMDXComponent=!0}}]);
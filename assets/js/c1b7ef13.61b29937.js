"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[36325],{3905:(e,n,t)=>{t.d(n,{Zo:()=>_,kt:()=>d});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},_=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,_=o(e,["components","mdxType","originalType","parentName"]),u=p(t),d=i,m=u["".concat(l,".").concat(d)]||u[d]||c[d]||r;return t?a.createElement(m,s(s({ref:n},_),{},{components:t})):a.createElement(m,s({ref:n},_))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,s=new Array(r);s[0]=u;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:i,s[1]=o;for(var p=2;p<r;p++)s[p]=t[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},48629:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var a=t(87462),i=(t(67294),t(3905));const r={title:"Pipeline Scan Example for Using GitLab and Gradle with Automatic Issue Generation",slug:"/r/Pipeline_Scan_Example_for_Using_GitLab_and_Gradle_with_Automatic_Issue_Generation"},s=void 0,o={unversionedId:"guides/pipeline_scan/pipeline_scan_gitlab_examples/r_gitlab_gradle_example",id:"guides/pipeline_scan/pipeline_scan_gitlab_examples/r_gitlab_gradle_example",title:"Pipeline Scan Example for Using GitLab and Gradle with Automatic Issue Generation",description:"This example YAML code shows how to add a Pipeline Scan and automatic issue generation as a build stage in a GitLab build pipeline using Gradle.",source:"@site/docs/guides/08_pipeline_scan/08_pipeline_scan_gitlab_examples/04_r_gitlab_gradle_example.md",sourceDirName:"guides/08_pipeline_scan/08_pipeline_scan_gitlab_examples",slug:"/r/Pipeline_Scan_Example_for_Using_GitLab_and_Gradle_with_Automatic_Issue_Generation",permalink:"/km-docusaurus-test/r/Pipeline_Scan_Example_for_Using_GitLab_and_Gradle_with_Automatic_Issue_Generation",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Pipeline Scan Example for Using GitLab and Gradle with Automatic Issue Generation",slug:"/r/Pipeline_Scan_Example_for_Using_GitLab_and_Gradle_with_Automatic_Issue_Generation"},sidebar:"tutorialSidebar",previous:{title:"Pipeline Scan Example for Using Gradle with GitLab",permalink:"/km-docusaurus-test/r/Pipeline_Scan_Example_for_Using_Gradle_with_GitLab"},next:{title:"Pipeline Scan Example for Using GitLab and Gradle with Automatic Vulnerability Generation",permalink:"/km-docusaurus-test/r/Pipeline_Scan_Example_for_Using_GitLab_and_Gradle_with_Automatic_Vulnerability_Generation"}},l={},p=[],_={toc:p};function c(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},_,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This example YAML code shows how to add a Pipeline Scan and automatic issue generation as a build stage in a GitLab build pipeline using Gradle."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Before you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"--gl_issue_generation")," parameter in a Pipeline Scan, you must ",(0,i.kt)("a",{parentName:"p",href:"https://docs.veracode.com/r/Set_a_GitLab_Access_Token"},"create a GitLab access token"),". If you want to use this parameter when scanning Java applications, you must also ","[configure environment variables to set GitLab base directories]","(",(0,i.kt)("a",{parentName:"p",href:"https://docs.veracode.com/r/Set_Environment_Variables_for_GitLab_Base_Directories%22%3E"},'https://docs.veracode.com/r/Set_Environment_Variables_for_GitLab_Base_Directories">'),". You can use any GitLab subscription to generate GitLab issues.")),(0,i.kt)("p",null,"This structure in the GitLab CI performs a self-test and sets the ",(0,i.kt)("inlineCode",{parentName:"p"},"$VERACODE_API_*")," variables in the CI/CD settings."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'\n# image must have JDK8+, gradle, curl, unzip\nimage: <image-with-above-requirements>\n\nstages:\n  - build\n  - scan\n\nbuild_job:\n  stage: build\n  artifacts:\n    name: ${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHA}_build\n    paths:\n      - build/\n    expire_in: 1 week\n  script: gradle clean build\n\npipeline scan:\n  stage: scan\n  dependencies:\n    - build_job\n  artifacts:\n    name: ${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHA}_pipeline-results\n    paths:\n      - results.json\n    expire_in: 1 week\n    when: always\n  script:\n    - curl -O https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip\n    - unzip pipeline-scan-LATEST.zip pipeline-scan.jar\n    - java -jar pipeline-scan.jar\n      --veracode_api_id "${VERACODE_API_ID}"\n      --veracode_api_key "${VERACODE_API_SECRET}"\n      --file "build/libs/sample.jar"\n      --fail_on_severity="Very High, High"\n      --fail_on_cwe="80"\n      --baseline_file "${CI_BASELINE_PATH}"\n      --timeout "${CI_TIMEOUT}"\n      --project_name "${CI_PROJECT_PATH}"\n      --project_url "${CI_REPOSITORY_URL}"\n      --project_ref "${CI_COMMIT_REF_NAME}"\n      --gl_issue_generation true\n\n')))}c.isMDXComponent=!0}}]);
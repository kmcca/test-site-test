"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[57719],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>g});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(t),g=r,d=m["".concat(s,".").concat(g)]||m[g]||u[g]||o;return t?a.createElement(d,i(i({ref:n},c),{},{components:t})):a.createElement(d,i({ref:n},c))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},23487:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=t(87462),r=(t(67294),t(3905));const o={title:"Maven Plugin for Agent-Based Scanning",id:"Maven Plugin for Agent-Based Scanning",slug:"/r/t_sc_maven"},i="Set Up the Agent-Based Scanning Maven Plugin",l={unversionedId:"guides/sca/setting_up_agent_based_scans/continuous_integration/maven/Maven Plugin for Agent-Based Scanning",id:"guides/sca/setting_up_agent_based_scans/continuous_integration/maven/Maven Plugin for Agent-Based Scanning",title:"Maven Plugin for Agent-Based Scanning",description:"The Veracode Software Composition Analysis (SCA) agent-based scanning Maven plugin allows you to automate the scanning of your Maven repositories. You can upload the results of plugin scans to Veracode for a specific organization or to your personal environment.",source:"@site/docs/guides/07_sca/03_setting_up_agent_based_scans/01_continuous_integration/10_maven/README.md",sourceDirName:"guides/07_sca/03_setting_up_agent_based_scans/01_continuous_integration/10_maven",slug:"/r/t_sc_maven",permalink:"/km-docusaurus-test/r/t_sc_maven",draft:!1,tags:[],version:"current",frontMatter:{title:"Maven Plugin for Agent-Based Scanning",id:"Maven Plugin for Agent-Based Scanning",slug:"/r/t_sc_maven"},sidebar:"tutorialSidebar",previous:{title:"Configuring the Gradle Plugin",permalink:"/km-docusaurus-test/r/Gradle_Plugin_Configurations"},next:{title:"Configuring the Maven Plugin",permalink:"/km-docusaurus-test/r/Maven_Plugin_Configurations"}},s={},p=[],c={toc:p};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"set-up-the-agent-based-scanning-maven-plugin"},"Set Up the Agent-Based Scanning Maven Plugin"),(0,r.kt)("p",null,"The Veracode Software Composition Analysis (SCA) agent-based scanning Maven plugin allows you to automate the scanning of your Maven repositories. You can upload the results of plugin scans to Veracode for a specific organization or to your personal environment."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"To complete this task:")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"In the Veracode Platform, select ",(0,r.kt)("strong",{parentName:"p"},"Scans & Analysis")," > ",(0,r.kt)("strong",{parentName:"p"},"Software Composition Analysis"),".")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Click the ",(0,r.kt)("strong",{parentName:"p"},"Agent-Based Scan")," tab.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Select a workspace.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Click ",(0,r.kt)("strong",{parentName:"p"},"Agents")," > ",(0,r.kt)("strong",{parentName:"p"},"Actions")," > ",(0,r.kt)("strong",{parentName:"p"},"Create")," > ",(0,r.kt)("strong",{parentName:"p"},"Maven"),".")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Click ",(0,r.kt)("strong",{parentName:"p"},"Create Agent & Generate Token"),".")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Choose to set your API token as an environment variable in the environment where you build your Maven repository, or add the token directly to the configuration within your ",(0,r.kt)("inlineCode",{parentName:"p"},"pom.xml")," file:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Environment Configuration:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Run this command to set your API token to the ",(0,r.kt)("inlineCode",{parentName:"p"},"SRCCLR_API_TOKEN")," environment variable:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"export SRCCLR_API_TOKEN={apiToken}\n")),(0,r.kt)("p",{parentName:"li"},"If your shell supports it, you may want to prefix the command with a space to avoid leaving the token in your shell history.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Run this command in the root of your Maven project to start a scan:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"mvn clean compile com.srcclr:srcclr-maven-plugin:scan\n"))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"pom.xml")," Configuration:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Add this code to your ",(0,r.kt)("inlineCode",{parentName:"li"},"pom.xml")," file in the root directory:")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"            <build>\n    <plugins>\n        <plugin>\n            <groupId>com.srcclr</groupId>\n            <artifactId>srcclr-maven-plugin</artifactId>\n            <version>\x3c!-- Insert latest version --\x3e</version>\n            <configuration>\n                \x3c!--- Add configuration details here--\x3e\n                <apiToken>OptionallyEnterUserTokenHere</apiToken>\n           </configuration>\n           <executions>\n               <execution>\n                   <id>srcclr-scan</id>\n                   <phase>verify</phase>\n                   <goals>\n                       <goal>scan</goal>\n                   </goals>\n               </execution>\n          </executions>\n        </plugin>\n    </plugins>\n</build>        \n")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Save the ",(0,r.kt)("inlineCode",{parentName:"li"},"pom.xml")," file. The agent-based scanning plugin automatically runs when you run any Maven lifecycle phase that executes after ",(0,r.kt)("inlineCode",{parentName:"li"},"verify"),", such as ",(0,r.kt)("inlineCode",{parentName:"li"},"install")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"deploy"),".")))))))}u.isMDXComponent=!0}}]);
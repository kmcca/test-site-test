"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[14183],{3905:(e,n,i)=>{i.d(n,{Zo:()=>c,kt:()=>m});var a=i(67294);function t(e,n,i){return n in e?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i,e}function r(e,n){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),i.push.apply(i,a)}return i}function s(e){for(var n=1;n<arguments.length;n++){var i=null!=arguments[n]?arguments[n]:{};n%2?r(Object(i),!0).forEach((function(n){t(e,n,i[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(i,n))}))}return e}function l(e,n){if(null==e)return{};var i,a,t=function(e,n){if(null==e)return{};var i,a,t={},r=Object.keys(e);for(a=0;a<r.length;a++)i=r[a],n.indexOf(i)>=0||(t[i]=e[i]);return t}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)i=r[a],n.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(t[i]=e[i])}return t}var o=a.createContext({}),p=function(e){var n=a.useContext(o),i=n;return e&&(i="function"==typeof e?e(n):s(s({},n),e)),i},c=function(e){var n=p(e.components);return a.createElement(o.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},_=a.forwardRef((function(e,n){var i=e.components,t=e.mdxType,r=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),_=p(i),m=t,b=_["".concat(o,".").concat(m)]||_[m]||u[m]||r;return i?a.createElement(b,s(s({ref:n},c),{},{components:i})):a.createElement(b,s({ref:n},c))}));function m(e,n){var i=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var r=i.length,s=new Array(r);s[0]=_;var l={};for(var o in n)hasOwnProperty.call(n,o)&&(l[o]=n[o]);l.originalType=e,l.mdxType="string"==typeof e?e:t,s[1]=l;for(var p=2;p<r;p++)s[p]=i[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,i)}_.displayName="MDXCreateElement"},32429:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=i(87462),t=(i(67294),i(3905));const r={title:"Pipeline Scan Example for Using a Baseline File with GitHub Actions",slug:"/r/Pipeline_Scan_Example_for_Using_a_Baseline_File_with_GitHub_Actions"},s=void 0,l={unversionedId:"guides/pipeline_scan/pipeline_scan_github_examples/r_github_baseline_example",id:"guides/pipeline_scan/pipeline_scan_github_examples/r_github_baseline_example",title:"Pipeline Scan Example for Using a Baseline File with GitHub Actions",description:"This YAML code example shows how to generate and use a baseline file in a GitHub Actions workflow.",source:"@site/docs/guides/08_pipeline_scan/07_pipeline_scan_github_examples/03_r_github_baseline_example.md",sourceDirName:"guides/08_pipeline_scan/07_pipeline_scan_github_examples",slug:"/r/Pipeline_Scan_Example_for_Using_a_Baseline_File_with_GitHub_Actions",permalink:"/km-docusaurus-test/r/Pipeline_Scan_Example_for_Using_a_Baseline_File_with_GitHub_Actions",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Pipeline Scan Example for Using a Baseline File with GitHub Actions",slug:"/r/Pipeline_Scan_Example_for_Using_a_Baseline_File_with_GitHub_Actions"},sidebar:"tutorialSidebar",previous:{title:"Pipeline Scan Example for Using Maven with GitHub Actions",permalink:"/km-docusaurus-test/r/Pipeline_Scan_Example_for_Using_Maven_with_GitHub_Actions"},next:{title:"GitLab Pipeline Scan Examples",permalink:"/km-docusaurus-test/r/Gitlab_Pipeline_Scan_Examples"}},o={},p=[],c={toc:p};function u(e){let{components:n,...i}=e;return(0,t.kt)("wrapper",(0,a.Z)({},c,i,{components:n,mdxType:"MDXLayout"}),(0,t.kt)("p",null,"This YAML code example shows how to generate and use a baseline file in a GitHub Actions workflow."),(0,t.kt)("p",null,"The Pipeline Scan evaluates only flaws that differ from those stored in the ",(0,t.kt)("a",{parentName:"p",href:"01_getstarted_pipeline_scan/06_c_about_pipeline_baseline_file.md"},"baseline file")," to determine pass or fail criteria. You can use a baseline file to evaluate security risk on only new changes to your application. The Pipeline Scan uses a single pipeline for the build and security scan, then stores the baseline file as an artifact each time a job runs. You can modify this example so that you can run the Pipeline Scan as its own pipeline that another job can trigger. Depending on your build configuration, you may want to store results in a separate globally-accessible location, such as a shared directory."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-yaml"},'\nname: pipeline-scan\n\non: push\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: build\n        run: gradle clean build\n  baseline:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Set up JDK 1.8\n        uses: actions/setup-java@v1\n        with:\n          java-version: 1.8\n      - name: Download the Pipeline Scanner\n        uses: wei/curl@master\n        with:\n          args: -O https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip\n      - name: Unzip the Pipeline Scanner\n        run: unzip pipeline-scan-LATEST.zip\n      - name: Create Baseline\n        run: java -Dpipeline.debug=true -jar pipeline-scan.jar --veracode_api_id "${{secrets.VERACODE_API_ID}}" --veracode_api_key "${{secrets.VERACODE_API_KEY}}" --file "example.jar" --json_output_file="baseline.json" || true\n      - name: Upload Baseline\n        uses: actions/upload-artifact@v1\n        with:\n          name: baseline\n          path: baseline.json\n  baseline-scan:\n    runs-on: ubuntu-latest\n    needs: baseline\n    steps:\n      - name: Set up JDK 1.8\n        uses: actions/setup-java@v1\n        with:\n          java-version: 1.8\n      - name: Download the Pipeline Scanner\n        uses: wei/curl@master\n        with:\n          args: -O https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip\n      - name: Unzip the Pipeline Scanner\n        run: unzip pipeline-scan-LATEST.zip\n      - name: download baseline\n        uses: actions/download-artifact@v1\n        with:\n          name: baseline\n      - name: Scan with baseline\n        run: java -Dpipeline.debug=true -jar pipeline-scan.jar --veracode_api_id "${{secrets.VERACODE_API_ID}}" --veracode_api_key "${{secrets.VERACODE_API_KEY}}" --file "example.jar" --baseline_file "baseline/baseline.json"\n\n')))}u.isMDXComponent=!0}}]);
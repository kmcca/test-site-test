"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[82930],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>f});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),u=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},l=function(e){var t=u(e.components);return n.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,s=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),d=u(r),f=o,m=d["".concat(c,".").concat(f)]||d[f]||p[f]||s;return r?n.createElement(m,a(a({ref:t},l),{},{components:r})):n.createElement(m,a({ref:t},l))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=r.length,a=new Array(s);a[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var u=2;u<s;u++)a[u]=r[u];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},15964:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>u});var n=r(87462),o=(r(67294),r(3905));const s={author:["Kevin McCarthy"],title:"About Supported Cleansing Functions",slug:"/r/review_cleansers",media_dir:"images/"},a=void 0,i={unversionedId:"guides/packaging/supported_framworks_cleansers/review_cleansers/README",id:"guides/packaging/supported_framworks_cleansers/review_cleansers/README",title:"About Supported Cleansing Functions",description:"As part of the software development process, ensure that data from an untrusted source does not introduce security issues in your application. Untrusted sources can include, but are not limited to, databases, files, web services, other applications, and user input. Veracode recommends that you check for these types of issues as early in the SDLC as possible, and continue checking for them throughout the life of your application.",source:"@site/docs/guides/03_packaging/34_supported_framworks_cleansers/02_review_cleansers/README.md",sourceDirName:"guides/03_packaging/34_supported_framworks_cleansers/02_review_cleansers",slug:"/r/review_cleansers",permalink:"/km-docusaurus-test/r/review_cleansers",draft:!1,tags:[],version:"current",frontMatter:{author:["Kevin McCarthy"],title:"About Supported Cleansing Functions",slug:"/r/review_cleansers",media_dir:"images/"},sidebar:"tutorialSidebar",previous:{title:"Supported Frameworks and Cleansers",permalink:"/km-docusaurus-test/r/c_frameworks"},next:{title:"Supported .NET Cleansing Functions",permalink:"/km-docusaurus-test/r/Supported_NET_Cleansing_Functions"}},c={},u=[],l={toc:u};function p(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"As part of the software development process, ensure that data from an untrusted source does not introduce security issues in your application. Untrusted sources can include, but are not limited to, databases, files, web services, other applications, and user input. Veracode recommends that you check for these types of issues as early in the SDLC as possible, and continue checking for them throughout the life of your application."),(0,o.kt)("p",null,"The Veracode Research team works to identify cleansing functions that can help lower the risk of security issues from occurring when you use them in the correct context. These can sanitize the data in a way that renders it safer, or cleansed, for use. Veracode Static Analysis recognizes these."),(0,o.kt)("p",null,"Not every function is valid in every attack circumstance. For example, you might need to use a different function to protect against cross-site scripting attacks in an HTML attribute instead of in a form field. Be aware of the context in which you are using the function."))}p.isMDXComponent=!0}}]);
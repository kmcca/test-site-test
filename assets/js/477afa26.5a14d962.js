"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[55171],{3905:(e,n,i)=>{i.d(n,{Zo:()=>c,kt:()=>b});var a=i(67294);function t(e,n,i){return n in e?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i,e}function r(e,n){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),i.push.apply(i,a)}return i}function l(e){for(var n=1;n<arguments.length;n++){var i=null!=arguments[n]?arguments[n]:{};n%2?r(Object(i),!0).forEach((function(n){t(e,n,i[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(i,n))}))}return e}function s(e,n){if(null==e)return{};var i,a,t=function(e,n){if(null==e)return{};var i,a,t={},r=Object.keys(e);for(a=0;a<r.length;a++)i=r[a],n.indexOf(i)>=0||(t[i]=e[i]);return t}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)i=r[a],n.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(t[i]=e[i])}return t}var o=a.createContext({}),p=function(e){var n=a.useContext(o),i=n;return e&&(i="function"==typeof e?e(n):l(l({},n),e)),i},c=function(e){var n=p(e.components);return a.createElement(o.Provider,{value:n},e.children)},_={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var i=e.components,t=e.mdxType,r=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(i),b=t,f=u["".concat(o,".").concat(b)]||u[b]||_[b]||r;return i?a.createElement(f,l(l({ref:n},c),{},{components:i})):a.createElement(f,l({ref:n},c))}));function b(e,n){var i=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var r=i.length,l=new Array(r);l[0]=u;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s.mdxType="string"==typeof e?e:t,l[1]=s;for(var p=2;p<r;p++)l[p]=i[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,i)}u.displayName="MDXCreateElement"},41342:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>_,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=i(87462),t=(i(67294),i(3905));const r={title:"Pipeline Scan Example for Using a Baseline File with GitLab",slug:"/r/Pipeline_Scan_Example_for_Using_a_Baseline_File_with_GitLab"},l=void 0,s={unversionedId:"guides/pipeline_scan/pipeline_scan_gitlab_examples/r_gitlab_pipeline_scan_baseline",id:"guides/pipeline_scan/pipeline_scan_gitlab_examples/r_gitlab_pipeline_scan_baseline",title:"Pipeline Scan Example for Using a Baseline File with GitLab",description:"This YAML code example shows how to generate, store, and use a baseline file in a GitLab build pipeline.",source:"@site/docs/guides/08_pipeline_scan/08_pipeline_scan_gitlab_examples/08_r_gitlab_pipeline_scan_baseline.md",sourceDirName:"guides/08_pipeline_scan/08_pipeline_scan_gitlab_examples",slug:"/r/Pipeline_Scan_Example_for_Using_a_Baseline_File_with_GitLab",permalink:"/km-docusaurus-test/r/Pipeline_Scan_Example_for_Using_a_Baseline_File_with_GitLab",draft:!1,tags:[],version:"current",sidebarPosition:8,frontMatter:{title:"Pipeline Scan Example for Using a Baseline File with GitLab",slug:"/r/Pipeline_Scan_Example_for_Using_a_Baseline_File_with_GitLab"},sidebar:"tutorialSidebar",previous:{title:"Pipeline Scan Example for GitLab and Gradle with Automatic Vulnerability Generation Using a Custom Policy",permalink:"/km-docusaurus-test/r/Pipeline_Scan_Example_for_Using_GitLab_and_Gradle_with_Automatic_Vulnerability_Generation_Using_a_Custom_Policy"},next:{title:"Pipeline Scan Example for Using Maven with GitLab",permalink:"/km-docusaurus-test/r/Pipeline_Scan_Example_for_Using_Maven_with_GitLab"}},o={},p=[],c={toc:p};function _(e){let{components:n,...i}=e;return(0,t.kt)("wrapper",(0,a.Z)({},c,i,{components:n,mdxType:"MDXLayout"}),(0,t.kt)("p",null,"This YAML code example shows how to generate, store, and use a baseline file in a GitLab build pipeline."),(0,t.kt)("p",null,"The Pipeline Scan evaluates only flaws that differ from those stored in the ",(0,t.kt)("a",{parentName:"p",href:"01_getstarted_pipeline_scan/06_c_about_pipeline_baseline_file.md"},"baseline file")," to determine pass or fail criteria. You can use a baseline file to evaluate security risk on only new changes to your application. The Pipeline Scan uses a single pipeline for the build and security scan, then stores the baseline file as an artifact each time a job runs. You can modify this example so that you can run the Pipeline Scan as its own pipeline that another job can trigger. Depending on your build configuration, you may want to store results in a separate globally-accessible location, such as a shared directory."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-yaml"},'\n# image must have JDK8+, gradle, curl, unzip\nimage: <image-with-above-requirements>\n\nstages:\n  - build\n  - scan\n  - store\n\nbuild_job:\n  stage: build\n  artifacts:\n    name: ${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHA}_build\n    paths:\n      - build/\n    expire_in: 1 week\n  script: gradle clean build\n\nScan:\n  stage: scan\n  only:\n    - master\n  dependencies:\n    - build_job\n  artifacts:\n    name: ${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHA}_pipeline-results\n    paths:\n      - baseline.json\n    expire_in: 1 week\n    when: always\n  script:\n    - curl -O https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip\n    - unzip pipeline-scan-LATEST.zip pipeline-scan.jar\n    - java -jar pipeline-scan.jar\n      --veracode_api_id "${VERACODE_API_ID}"\n      --veracode_api_key "${VERACODE_API_SECRET}"\n      --file "build/libs/sample.jar"\n      --fail_on_severity="Very High, High"\n      --fail_on_cwe="80"\n      --json_output_file="baseline.json"\n      --timeout "${CI_TIMEOUT}"\n      --project_name "${CI_PROJECT_PATH}"\n      --project_url "${CI_REPOSITORY_URL}"\n      --project_ref "${CI_COMMIT_REF_NAME}"\n\nStore Baseline:\n  # Job will only run on master, if requested.\n  # Will restore the above baseline artifact so it can be pulled down in other stages\n  stage: store\n  before_script:\n  only:\n    - master\n  when: manual\n  script:\n    - echo "Storing results.json as baseline.json"\n  artifacts:\n    name: baseline\n    paths:\n      - baseline.json # If you want to keep this longer than the GitLab default - press store in the web UI\n\nBaseline Scan:\n  # Job will run anywhere, except master. Will pull the baseline file and use it in the scan, if available\n  dependencies:\n    - Scan\n  except:\n    - master\n  stage: scan\n  script:\n    - git clean -dfx\n    - "curl -O https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip"\n    - unzip pipeline-scan-LATEST.zip pipeline-scan.jar\n    - \'[[ ! -f baseline.json ]] &&  curl --location "$CI_PROJECT_URL/-/jobs/artifacts/$CI_COMMIT_REF_NAME/raw/baseline.json?job=Store%20Baseline" -o baseline.json\'\n    - java -jar pipeline-scan.jar --veracode_api_id "${VERACODE_KEY}" --veracode_api_key "${VERACODE_SECRET}" --file "<file_to_scan>" --project_name "${CI_PROJECT_PATH}" --project_url "${CI_PROJECT_URL}" --project_ref "${CI_COMMIT_REF_NAME}" --baseline_file baseline.json -jf results.json\n\n')))}_.isMDXComponent=!0}}]);
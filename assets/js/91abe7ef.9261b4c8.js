"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[50917],{3905:(e,n,t)=>{t.d(n,{Zo:()=>g,kt:()=>d});var o=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,i=function(e,n){if(null==e)return{};var t,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=o.createContext({}),s=function(e){var n=o.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},g=function(e){var n=s(e.components);return o.createElement(p.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,g=l(e,["components","mdxType","originalType","parentName"]),u=s(t),d=i,f=u["".concat(p,".").concat(d)]||u[d]||c[d]||r;return t?o.createElement(f,a(a({ref:n},g),{},{components:t})):o.createElement(f,a({ref:n},g))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,a=new Array(r);a[0]=u;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var s=2;s<r;s++)a[s]=t[s];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},6002:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>a,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var o=t(87462),i=(t(67294),t(3905));const r={title:"Configuring Pipeline Scan Logging",slug:"/r/c_pipeline_scan_logging"},a=void 0,l={unversionedId:"guides/pipeline_scan/c_pipeline_scan_logging",id:"guides/pipeline_scan/c_pipeline_scan_logging",title:"Configuring Pipeline Scan Logging",description:"Veracode provides a few configuration options for generating log messages from Pipeline Scans.",source:"@site/docs/guides/08_pipeline_scan/03_c_pipeline_scan_logging.md",sourceDirName:"guides/08_pipeline_scan",slug:"/r/c_pipeline_scan_logging",permalink:"/km-docusaurus-test/r/c_pipeline_scan_logging",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Configuring Pipeline Scan Logging",slug:"/r/c_pipeline_scan_logging"},sidebar:"tutorialSidebar",previous:{title:"Using Policies with Pipeline Scans",permalink:"/km-docusaurus-test/r/Using_Policies_with_the_Pipeline_Scan"},next:{title:"Pipeline Scan Command Parameters",permalink:"/km-docusaurus-test/r/r_pipeline_scan_commands"}},p={},s=[{value:"<code>pipeline.scan.log4j2.properties</code> Example",id:"pipelinescanlog4j2properties-example",level:2},{value:"<code>log4j2.xml</code> Configuration File Example",id:"log4j2xml-configuration-file-example",level:2}],g={toc:s};function c(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,o.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Veracode provides a few configuration options for generating log messages from Pipeline Scans."),(0,i.kt)("p",null,"To obtain detailed console output during scanning, add the parameter ",(0,i.kt)("a",{parentName:"p",href:"https://docs.veracode.com/r/r_pipeline_scan_commands"},(0,i.kt)("inlineCode",{parentName:"a"},"--verbose=true"))," to your pipeline script."),(0,i.kt)("p",null,"To send logging information to outputs other than the console, you can use the ",(0,i.kt)("a",{parentName:"p",href:"https://logging.apache.org/log4j/2.x/"},"Apache Log4j 2 utility"),"."),(0,i.kt)("p",null,"To configure logging settings, you can include a log4j2 configuration file with the name ",(0,i.kt)("inlineCode",{parentName:"p"},"pipeline.scan.log4j2.properties")," in the execution directory of ",(0,i.kt)("inlineCode",{parentName:"p"},"pipeline-scan.jar"),". The configuration file overrides the command-line options."),(0,i.kt)("p",null,"These examples show a Java and XML configuration that uses Log4j 2 to:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Send verbose and debug messages to the log file ",(0,i.kt)("inlineCode",{parentName:"li"},"pipeline-scan.log")),(0,i.kt)("li",{parentName:"ul"},"Send information messages to the console")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"In both examples, you can turn on log for console by setting ",(0,i.kt)("code",null,"logger.file.additivity")," to ",(0,i.kt)("code",null,"true"),".")),(0,i.kt)("h2",{id:"pipelinescanlog4j2properties-example"},(0,i.kt)("code",null,"pipeline.scan.log4j2.properties")," Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"\n      # Extra logging related to initialization of Log4j\n      # Set to debug or trace if log4j initialization is failing\n      status = warn\n\n      # Name of the configuration\n      name = ConsoleLogForPipelineScan\n\n      # Define the output file, e.g. logs/pipeline-scan.log, pipeline-scan.log\n      property.filename = pipeline-scan.log\n\n      # Console appender configuration\n      appender.console.type = Console\n      appender.console.name = consoleLogger\n      appender.console.layout.type = PatternLayout\n      appender.console.layout.pattern = [%d{dd MMM yyyy HH:mm:ss,SSSS}] PIPELINE-SCAN %p: %m %n\n\n      # File appender configuration\n      appender.file.type = File\n      appender.file.name = fileLogger\n      appender.file.fileName = ${filename}\n      appender.file.layout.type = PatternLayout\n      appender.file.layout.pattern = [%d{dd MMM yyyy HH:mm:ss,SSSS}] PIPELINE-SCAN %p: %m %n\n\n      logger.file.name=PIPELINE_SCAN\n      logger.file.level = debug\n      logger.file.additivity = false\n      logger.file.appenderRef.file.ref = fileLogger\n\n      rootLogger.level = info\n      rootLogger.appenderRef.stdout.ref = consoleLogger\n\n")),(0,i.kt)("h2",{id:"log4j2xml-configuration-file-example"},(0,i.kt)("code",null,"log4j2.xml")," Configuration File Example"),(0,i.kt)("p",null,"Alternatively, to use a ",(0,i.kt)("inlineCode",{parentName:"p"},"log4j2.xml")," configuration file like this example, you must specify the command line option ",(0,i.kt)("inlineCode",{parentName:"p"},"-Dlog4j.configurationFile=[path-to]/log4j2.xml")," when running a pipeline scan:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'    <?xml version="1.0" encoding="UTF-8"?>\n    <Configuration status="WARN">\n        <Appenders>\n            <Console name="Console" target="SYSTEM_OUT">\n                <PatternLayout pattern="%d{HH:mm:ss.SSS} %-5level - %msg%n"/>\n            </Console>\n            <File name="File" fileName="pipeline-scan.log" append="true">\n                <PatternLayout>\n                    <Pattern>%d{HH:mm:ss.SSS} [%t] %-5level - %msg%n</Pattern>\n                </PatternLayout>\n            </File>\n        </Appenders>\n        <Loggers>\n            <Logger name="PIPELINE_SCAN" level="debug" additivity="false">\n                <AppenderRef ref="File"/>\n            </Logger>\n            <Root level="info">\n                <AppenderRef ref="Console"/>\n            </Root>\n        </Loggers>\n    </Configuration>\n\n')))}c.isMDXComponent=!0}}]);
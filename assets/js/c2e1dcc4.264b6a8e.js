"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[58611],{3905:(e,n,r)=>{r.d(n,{Zo:()=>u,kt:()=>m});var t=r(67294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function s(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=t.createContext({}),o=function(e){var n=t.useContext(p),r=n;return e&&(r="function"==typeof e?e(n):s(s({},n),e)),r},u=function(e){var n=o(e.components);return t.createElement(p.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},_=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),_=o(r),m=a,d=_["".concat(p,".").concat(m)]||_[m]||c[m]||i;return r?t.createElement(d,s(s({ref:n},u),{},{components:r})):t.createElement(d,s({ref:n},u))}));function m(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=r.length,s=new Array(i);s[0]=_;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,s[1]=l;for(var o=2;o<i;o++)s[o]=r[o];return t.createElement.apply(null,s)}return t.createElement.apply(null,r)}_.displayName="MDXCreateElement"},19355:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>p,contentTitle:()=>s,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>o});var t=r(87462),a=(r(67294),r(3905));const i={title:"Pipeline Scan Example for Using Maven with Azure DevOps",slug:"/r/Pipeline_Scan_Example_for_Using_Maven_with_Azure_DevOps"},s=void 0,l={unversionedId:"guides/pipeline_scan/pipeline_scan_azure_examples/r_azure_scan_maven_example",id:"guides/pipeline_scan/pipeline_scan_azure_examples/r_azure_scan_maven_example",title:"Pipeline Scan Example for Using Maven with Azure DevOps",description:"This example YAML code shows how to add a Pipeline Scan as a build stage in an Azure DevOps build pipeline that uses Maven on Unix.",source:"@site/docs/guides/08_pipeline_scan/06_pipeline_scan_azure_examples/03_r_azure_scan_maven_example.md",sourceDirName:"guides/08_pipeline_scan/06_pipeline_scan_azure_examples",slug:"/r/Pipeline_Scan_Example_for_Using_Maven_with_Azure_DevOps",permalink:"/km-docusaurus-test/r/Pipeline_Scan_Example_for_Using_Maven_with_Azure_DevOps",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Pipeline Scan Example for Using Maven with Azure DevOps",slug:"/r/Pipeline_Scan_Example_for_Using_Maven_with_Azure_DevOps"},sidebar:"tutorialSidebar",previous:{title:"Pipeline Scan Example for Using Gradle with Azure DevOps",permalink:"/km-docusaurus-test/r/Pipeline_Scan_Example_for_Using_Gradle_with_Azure_DevOps"},next:{title:"Pipeline Scan Example for Using a Baseline File with Azure DevOps",permalink:"/km-docusaurus-test/r/Pipeline_Scan_Example_for_Using_a_Baseline_File_with_Azure_Devops"}},p={},o=[],u={toc:o};function c(e){let{components:n,...r}=e;return(0,a.kt)("wrapper",(0,t.Z)({},u,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This example YAML code shows how to add a Pipeline Scan as a build stage in an Azure DevOps build pipeline that uses Maven on Unix."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'\ntrigger:\n  - master\npool:\n  vmImage: "ubuntu-latest"\nsteps:\n  - task: Maven@3\n    displayName: Build with Maven\n    inputs:\n      mavenPomFile: "app/pom.xml"\n      mavenOptions: "-Xmx3072m"\n      javaHomeOption: "JDKVersion"\n      jdkVersionOption: "1.8"\n      jdkArchitectureOption: "x64"\n      publishJUnitResults: true\n      testResultsFiles: "**/surefire-reports/TEST-*.xml"\n      goals: "package"\n  - task: Bash@3\n    displayName: Veracode Pipeline Scan\n    inputs:\n      targetType: "inline"\n      script: |\n        curl -sSO https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip\n        unzip -o pipeline-scan-LATEST.zip\n        java -jar pipeline-scan.jar -vid $(VERACODE_API_ID) -vkey $(VERACODE_API_KEY) -f /home/vsts/work/1/s/app/target/verademo.war || true\n      # VERACODE_API_ID and VERACODE_API_KEY environment variables must reference your API credentials.\n      # "|| true" specifies to continue build if Pipeline Scan discovers flaws.\n      # To fail the build for new flaws not listed in a baseline file, add an existing baseline file with "-bf <baseline filename>" and remove "|| true".\n  - publish: $(System.DefaultWorkingDirectory)/results.json # Save the scan results as a file named results.json.\n    artifact: VeracodeBaseline\n\n')))}c.isMDXComponent=!0}}]);
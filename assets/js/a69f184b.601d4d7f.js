"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[31593],{3905:(e,n,i)=>{i.d(n,{Zo:()=>u,kt:()=>_});var t=i(67294);function a(e,n,i){return n in e?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i,e}function r(e,n){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),i.push.apply(i,t)}return i}function l(e){for(var n=1;n<arguments.length;n++){var i=null!=arguments[n]?arguments[n]:{};n%2?r(Object(i),!0).forEach((function(n){a(e,n,i[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(i,n))}))}return e}function o(e,n){if(null==e)return{};var i,t,a=function(e,n){if(null==e)return{};var i,t,a={},r=Object.keys(e);for(t=0;t<r.length;t++)i=r[t],n.indexOf(i)>=0||(a[i]=e[i]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)i=r[t],n.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}var p=t.createContext({}),s=function(e){var n=t.useContext(p),i=n;return e&&(i="function"==typeof e?e(n):l(l({},n),e)),i},u=function(e){var n=s(e.components);return t.createElement(p.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var i=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=s(i),_=a,m=d["".concat(p,".").concat(_)]||d[_]||c[_]||r;return i?t.createElement(m,l(l({ref:n},u),{},{components:i})):t.createElement(m,l({ref:n},u))}));function _(e,n){var i=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=i.length,l=new Array(r);l[0]=d;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var s=2;s<r;s++)l[s]=i[s];return t.createElement.apply(null,l)}return t.createElement.apply(null,i)}d.displayName="MDXCreateElement"},79942:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>r,metadata:()=>o,toc:()=>s});var t=i(87462),a=(i(67294),i(3905));const r={title:"Pipeline Scan Example for an ASP.NET Application in Azure DevOps",slug:"/r/Pipeline_Scan_Example_for_an_ASPNET_Application_in_Azure_DevOps"},l=void 0,o={unversionedId:"guides/pipeline_scan/pipeline_scan_azure_examples/r_azure_pipeline_yaml_example_dotnet",id:"guides/pipeline_scan/pipeline_scan_azure_examples/r_azure_pipeline_yaml_example_dotnet",title:"Pipeline Scan Example for an ASP.NET Application in Azure DevOps",description:"This example YAML code shows how to add a Pipeline Scan as a build stage in an Azure DevOps build pipeline for an ASP.NET application on Windows.",source:"@site/docs/guides/08_pipeline_scan/06_pipeline_scan_azure_examples/01_r_azure_pipeline_yaml_example_dotnet.md",sourceDirName:"guides/08_pipeline_scan/06_pipeline_scan_azure_examples",slug:"/r/Pipeline_Scan_Example_for_an_ASPNET_Application_in_Azure_DevOps",permalink:"/km-docusaurus-test/r/Pipeline_Scan_Example_for_an_ASPNET_Application_in_Azure_DevOps",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Pipeline Scan Example for an ASP.NET Application in Azure DevOps",slug:"/r/Pipeline_Scan_Example_for_an_ASPNET_Application_in_Azure_DevOps"},sidebar:"tutorialSidebar",previous:{title:"Azure DevOps Pipeline Scan Examples",permalink:"/km-docusaurus-test/r/Azure_DevOps_Pipeline_Scan_Examples"},next:{title:"Pipeline Scan Example for Using Gradle with Azure DevOps",permalink:"/km-docusaurus-test/r/Pipeline_Scan_Example_for_Using_Gradle_with_Azure_DevOps"}},p={},s=[],u={toc:s};function c(e){let{components:n,...i}=e;return(0,a.kt)("wrapper",(0,t.Z)({},u,i,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This example YAML code shows how to add a Pipeline Scan as a build stage in an Azure DevOps build pipeline for an ASP.NET application on Windows."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'trigger:\n  - main\n\npool:\n  vmImage: "windows-latest"\n\nvariables:\n  solution: "**/*.sln"\n  buildPlatform: "Any CPU"\n  buildConfiguration: "Release"\n\nsteps:\n  - task: NuGetToolInstaller@1\n\n  - task: NuGetCommand@2\n    inputs:\n      restoreSolution: "$(solution)"\n\n  - task: VSBuild@1\n    inputs:\n      solution: "$(solution)"\n      msbuildArgs: \'/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactStagingDirectory)"\'\n      platform: "$(buildPlatform)"\n      configuration: "$(buildConfiguration)"\n\n  - task: CmdLine@2\n    displayName: Veracode Pipeline Scan\n    inputs:\n      script: |\n        curl -sSO https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip\n        unzip -o pipeline-scan-LATEST.zip\n        java -jar pipeline-scan.jar -vid $(VERACODE_API_ID) -vkey $(VERACODE_API_KEY) -f $(build.artifactstagingdirectory)\\Verademo-dotnet.zip || true\n      # VERACODE_API_ID and VERACODE_API_KEY environment variables must reference your API credentials.\n      # "|| true" specifies to continue build if Pipeline Scan discovers flaws.\n      # To fail the build for new flaws not listed in a baseline file, add an existing baseline file with "-bf <baseline filename>" and remove "|| true".\n\n  - task: PublishBuildArtifacts@1\n    displayName: Create Build Artifact for Veracode Pipeline Scan Results\n    inputs:\n      PathtoPublish: "results.json"\n      ArtifactName: "Build"\n      publishLocation: "Container"\n')))}c.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[60148],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>p});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),g=c(n),p=a,f=g["".concat(l,".").concat(p)]||g[p]||d[p]||i;return n?r.createElement(f,s(s({ref:t},u),{},{components:n})):r.createElement(f,s({ref:t},u))}));function p(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=g;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var c=2;c<i;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},9483:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const i={title:"Validating Fixed Agent-Based Scan Results",slug:"/r/Validating_Fixed_Agent_Based_Scan_Results"},s=void 0,o={unversionedId:"guides/sca/using_agent_based_scans/finding_and_fixing_vulnerabilities/validating_fixed_vulnerability",id:"guides/sca/using_agent_based_scans/finding_and_fixing_vulnerabilities/validating_fixed_vulnerability",title:"Validating Fixed Agent-Based Scan Results",description:"Before committing your code changes, you can run an agent-based scan with the --allow-dirty flag to validate a fix you made to your repository. This flag ignores uncommitted changes in your code. For example:",source:"@site/docs/guides/07_sca/04_using_agent_based_scans/18_finding_and_fixing_vulnerabilities/21_validating_fixed_vulnerability.md",sourceDirName:"guides/07_sca/04_using_agent_based_scans/18_finding_and_fixing_vulnerabilities",slug:"/r/Validating_Fixed_Agent_Based_Scan_Results",permalink:"/km-docusaurus-test/r/Validating_Fixed_Agent_Based_Scan_Results",draft:!1,tags:[],version:"current",sidebarPosition:21,frontMatter:{title:"Validating Fixed Agent-Based Scan Results",slug:"/r/Validating_Fixed_Agent_Based_Scan_Results"},sidebar:"tutorialSidebar",previous:{title:"Viewing Agent-Based Scan Results",permalink:"/km-docusaurus-test/r/Viewing_Agent_Based_Scan_Results"},next:{title:"Managing Issues in Agent-Based Scans",permalink:"/km-docusaurus-test/r/c_sc_issues_overview"}},l={},c=[],u={toc:c};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Before committing your code changes, you can run an agent-based scan with the ",(0,a.kt)("inlineCode",{parentName:"p"},"--allow-dirty")," flag to validate a fix you made to your repository. This flag ignores uncommitted changes in your code. For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"srcclr scan /path/to/<project_folder> --allow-dirty\n")),(0,a.kt)("p",null,"When you verify that the vulnerability no longer appears in the scan output, you have fixed the vulnerability, and you can commit your code."))}d.isMDXComponent=!0}}]);